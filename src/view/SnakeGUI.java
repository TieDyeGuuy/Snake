package view;

import java.awt.Color;
import java.awt.Graphics;
import controller.Controller;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ben Polson
 */
public class SnakeGUI extends javax.swing.JFrame {
    
    private Controller master = null;
    // keeps track of where the start of the snake will be
    private int myCenterX = -1;
    private int myCenterY = -1;
    // only used when someone clicks and drags the view
    private int mouseXRel = Integer.MAX_VALUE;
    private int mouseYRel = Integer.MAX_VALUE;
    
    /**
     * Creates new form SnakeGUI
     */
    public SnakeGUI() {
        initComponents();
        master = new Controller(this);
        recenter();
    }
    private int getMyCenterX() {
        return myCenterX;
    }
    private int getMyCenterY() {
        return myCenterY;
    }
    // helps to move where the start of the snake will go
    private void recenter(int x, int y) {
        myCenterX = x;
        myCenterY = y;
    }
    // put start of snake back to the center of gridPanel
    private void recenter() {
        int x = this.gridPanel.getX() + this.gridPanel.getWidth() / 2;
        int y = this.gridPanel.getY() + this.gridPanel.getHeight() / 2;
        recenter(x, y);
    }
    private void checkCenter() {
        if(this.gridPanel.getX() + this.gridPanel.getWidth() - 10 < 
                this.myCenterX) {
            this.myCenterX = this.gridPanel.getX() + 
                    this.gridPanel.getWidth() - 10;
        }
        if(this.gridPanel.getY() + this.gridPanel.getHeight() - 10 < 
                this.myCenterY) {
            this.myCenterY = this.gridPanel.getY() + 
                    this.gridPanel.getHeight() - 10;
        }
        if(this.gridPanel.getX() + 3 > this.myCenterX) {
            this.myCenterX = this.gridPanel.getX() + 3;
        }
        if(this.gridPanel.getY() + 3 > this.myCenterY) {
            this.myCenterY = this.gridPanel.getY() + 3;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gridPanel = new javax.swing.JPanel() {
            private int BAR_WIDTH = 4;
            private int BAR_DISPLACE = 2;
            private int GAP = 20;
            private int DOT_SIZE = 9;
            private int DOT_DISPLACE = 5;
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                // variable declaration
                SnakeGUI parent = (SnakeGUI)this.getTopLevelAncestor();
                int x = this.getX();
                int y = this.getY();
                int width = this.getWidth();
                int height = this.getHeight();

                // double check center is in bounds
                parent.checkCenter();
                int centerX = parent.getMyCenterX();
                int centerY = parent.getMyCenterY();
                if(centerX < 0) {
                    centerX = x + width / 2;
                    centerY = y + height / 2;
                }

                // background
                g.setColor(Color.WHITE);
                g.fillRect(x, y, width, height);

                int colMin = (centerX - x + this.BAR_WIDTH - this.BAR_DISPLACE)
                / this.GAP * -1;
                int colMax = (x + width - centerX + this.BAR_WIDTH - this.BAR_DISPLACE)
                / this.GAP;
                int rowMin = (centerY - y + this.BAR_WIDTH - this.BAR_DISPLACE)
                / this.GAP * -1;
                int rowMax = (y + height - centerY + this.BAR_WIDTH - this.BAR_DISPLACE)
                / this.GAP;
                g.setColor(Color.lightGray);
                for(int vert = colMin; vert <= colMax; vert++) {
                    g.fillRect(
                        centerX - this.BAR_DISPLACE + vert * this.GAP,
                        y,
                        this.BAR_WIDTH,
                        height);
                }
                for(int horiz = rowMin; horiz <= rowMax; horiz++) {
                    g.fillRect(
                        x,
                        centerY - this.BAR_DISPLACE + horiz * this.GAP,
                        width,
                        this.BAR_WIDTH);
                }
                g.setColor(Color.RED);
                g.fillOval(centerX-5, centerY-5, 9, 9);
                g.setColor(Color.DARK_GRAY);
                for(int row = rowMin; row <= rowMax; row++) {
                    for(int col = colMin; col <= colMax; col++) {
                        if(row == 0 && col == 0) {
                            continue;
                        }
                        g.fillOval(
                            centerX - this.DOT_DISPLACE + col * this.GAP,
                            centerY - this.DOT_DISPLACE + row * this.GAP,
                            this.DOT_SIZE,
                            this.DOT_SIZE);
                    }
                }
            }
        };
        toolPanel = new javax.swing.JPanel();
        recenterButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Snake");
        setMinimumSize(new java.awt.Dimension(200, 150));

        gridPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                gridPanelMouseDragged(evt);
            }
        });
        gridPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                gridPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                gridPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout gridPanelLayout = new javax.swing.GroupLayout(gridPanel);
        gridPanel.setLayout(gridPanelLayout);
        gridPanelLayout.setHorizontalGroup(
            gridPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );
        gridPanelLayout.setVerticalGroup(
            gridPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );

        recenterButton.setLabel("Recenter");
        recenterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recenterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout toolPanelLayout = new javax.swing.GroupLayout(toolPanel);
        toolPanel.setLayout(toolPanelLayout);
        toolPanelLayout.setHorizontalGroup(
            toolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(recenterButton, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
        );
        toolPanelLayout.setVerticalGroup(
            toolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolPanelLayout.createSequentialGroup()
                .addComponent(recenterButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gridPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(toolPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gridPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toolPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void recenterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recenterButtonActionPerformed
        // TODO add your handling code here:
        this.recenter();
        this.paintComponents(this.getGraphics());
    }//GEN-LAST:event_recenterButtonActionPerformed

    private void gridPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridPanelMousePressed
        // TODO add your handling code here:
        this.mouseXRel = this.myCenterX - evt.getXOnScreen();
        this.mouseYRel = this.myCenterY - evt.getYOnScreen();
    }//GEN-LAST:event_gridPanelMousePressed

    private void gridPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridPanelMouseDragged
        // TODO add your handling code here:
        if(this.mouseXRel == Integer.MAX_VALUE) {
            this.mouseXRel = this.myCenterX - evt.getXOnScreen();
        }
        if(this.mouseYRel == Integer.MAX_VALUE) {
            this.mouseYRel = this.myCenterY - evt.getYOnScreen();
        }
        this.myCenterX = evt.getXOnScreen() + this.mouseXRel;
        this.myCenterY = evt.getYOnScreen() + this.mouseYRel;
        this.gridPanel.paint(this.gridPanel.getGraphics());
    }//GEN-LAST:event_gridPanelMouseDragged

    private void gridPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridPanelMouseReleased
        // TODO add your handling code here:
        this.mouseXRel = Integer.MAX_VALUE;
        this.mouseYRel = Integer.MAX_VALUE;
    }//GEN-LAST:event_gridPanelMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnakeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnakeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnakeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnakeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SnakeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel gridPanel;
    private javax.swing.JButton recenterButton;
    private javax.swing.JPanel toolPanel;
    // End of variables declaration//GEN-END:variables
}
